% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FENN.R
\name{FENN}
\alias{FENN}
\title{This function computes the Free Energy Metric Learning (FENN)
classification algorithm.}
\usage{
FENN(Y, X, method = "CV", CV_window = NA, dimension_reduction = FALSE,
            threshold = 0.99, K = 5)
}
\arguments{
\item{Y}{vector of non-negative integer labels corresponding to each data point.}

\item{X}{Input numeric matrix where each row is a data point whose
label is the corresponding entry in \code{Y} and each column is a
variable.}

\item{method}{The method for estimating the smoothing parameter This can either be set
to \code{"CV"} or \code{"fisher.information"}. The default value is
\code{method = "CV"} in which case the smoothing parameter is determined
using 10-fold cross-validation. The possible values for the smoothing
parameter are generated in a window around the value that maximizes the
fisher information.
If \code{method = "fisher.information"} then the smoothing parameter is
selected according to the value that maximizes the fisher information.}

\item{CV_window}{The window around the value of the smoothing parameter that maximizes the fisher
information. The default value is set to \code{CV_window = NA} in
which case the value \code{CV_window = ncol(X)} is set internally.
If \code{method = "fisher.information"} then the value of this parameter
is not considered when computing the FENN metric.}

\item{dimension_reduction}{Learn the transformation matrix for the optimal dimension
of the reduced space. The default value is
\code{dimension_reduction = FALSE}.}

\item{threshold}{The threshold cutoff on the sum of free energies when performing
dimension reduction. The default value is \code{threshold = 0.99}.}

\item{K}{The number of neighbors to be used for K-NN classification during the CV
procedure when computing the optimal tuning parameter. The user is advised
to set this value to the number of neighbors that will be used in classification
in the transformed space after the FENN metric is applied to the original data.
Default value is set to \code{K = 5}.}
}
\value{
This function returns a list with the following items:
\item{FENNTransform}{The matrix under which the data was transformed. The
              multiplication of this matrix with its transpose gives
              the matrix used in the Mahalanobis
              metric.}
\item{TransformedX}{The transformed original data \strong{X} which was transformed
                    using the FENN trasformation matrix i.e \eqn{TransformedX = X *
                    FENNTransform}}.
}
\description{
This function computes the Von-Neumann Metric Learning (FENN)
             classification algorithm as described in [1]. See the Vignette
             by using the command \strong{browseVignette("DistanceLearning")}
             for an introduction to using FENN.
}
\details{
See the Vignette by using the command
         \strong{browseVignette("DistanceLearning")}
         for an introduction to using FENN.
}
\examples{
# Load data from package DistanceLearning
library(DistanceLearning)
fname <- system.file("extdata", "example_data.csv", package="DistanceLearning")
df <- read.csv(fname)
Y <- as.integer(df$y)
X <- as.matrix(df[,c(2,3)])
sample_points <- sample(1:nrow(X), 40, replace = FALSE)
trainX <- X[sample_points,]
trainY <- Y[sample_points]
testX <- X[-sample_points,]
testY <- Y[-sample_points]

# Learn the metric, and get the transformed data
result <- FENN(trainY, trainX, method = "CV")
FENNTransform <- result$FENNTransform

# Get the accuracy of KNN classification without applying the new metric
yhat <- knn(trainX, testX, trainY, k = 10, prob = FALSE)
Accuracy <- length(which(testY == yhat))/length(testY)
Accuracy

# Get the accuracy of KNN classification after applying the new metric
transformedtestX <- testX \%*\% FENNTransform
transformedtrainX <- trainX \%*\% FENNTransform
yhat2 <- knn(transformedtrainX, transformedtestX, trainY, k = 5, prob = FALSE)
Accuracy2 <- length(which(testY == yhat2))/length(testY)
Accuracy2

}
\references{
[1] C. T. Fakhry, P. Chen, R. Kularni and K. Zarringhalam.
            A Free Energy Based Approach for Distance Metric Learning, Submitted.
}
\author{
Carl Tony Fakhry, Ping Chen, Rahul Kulkarni and Kourosh Zarringhalam
}
